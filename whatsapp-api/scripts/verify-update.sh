#!/bin/bash

echo "üîç Verificando actualizaci√≥n..."

# Colores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
SERVER_URL="https://docker.website"
API_KEY="whatsapp-api-key-2024"
ERRORS=0

echo -e "${BLUE}üìã Ejecutando verificaciones post-actualizaci√≥n...${NC}"

# Verificaci√≥n 1: PM2 Status
echo -e "${YELLOW}1Ô∏è‚É£  Verificando estado de PM2...${NC}"
if command -v pm2 &> /dev/null; then
    pm2_status=$(pm2 jlist | jq -r '.[] | select(.name=="whatsapp-api") | .pm2_env.status' 2>/dev/null)
    if [ "$pm2_status" = "online" ]; then
        echo -e "${GREEN}‚úÖ PM2: whatsapp-api est√° online${NC}"
    else
        echo -e "${RED}‚ùå PM2: whatsapp-api no est√° online (estado: $pm2_status)${NC}"
        ((ERRORS++))
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  PM2 no encontrado${NC}"
fi

# Verificaci√≥n 2: Servidor responde
echo -e "${YELLOW}2Ô∏è‚É£  Verificando respuesta del servidor...${NC}"
http_status=$(curl -s -o /dev/null -w "%{http_code}" "$SERVER_URL" --max-time 10)
if [ "$http_status" = "200" ]; then
    echo -e "${GREEN}‚úÖ Servidor responde correctamente (HTTP $http_status)${NC}"
else
    echo -e "${RED}‚ùå Servidor no responde correctamente (HTTP $http_status)${NC}"
    ((ERRORS++))
fi

# Verificaci√≥n 3: API Health endpoint
echo -e "${YELLOW}3Ô∏è‚É£  Verificando endpoint de salud de la API...${NC}"
health_response=$(curl -s -H "Authorization: Bearer $API_KEY" "$SERVER_URL/api/health" --max-time 10)
if echo "$health_response" | grep -q "ok"; then
    echo -e "${GREEN}‚úÖ API Health: OK${NC}"
else
    echo -e "${RED}‚ùå API Health: Error o no responde${NC}"
    echo -e "${RED}   Respuesta: $health_response${NC}"
    ((ERRORS++))
fi

# Verificaci√≥n 4: Endpoint de informaci√≥n del servidor
echo -e "${YELLOW}4Ô∏è‚É£  Verificando informaci√≥n del servidor...${NC}"
info_response=$(curl -s "$SERVER_URL/info" --max-time 10)
if echo "$info_response" | grep -q "version"; then
    echo -e "${GREEN}‚úÖ Info endpoint funciona correctamente${NC}"
    version=$(echo "$info_response" | jq -r '.version' 2>/dev/null || echo "No disponible")
    echo -e "${BLUE}   Versi√≥n: $version${NC}"
else
    echo -e "${RED}‚ùå Info endpoint no responde correctamente${NC}"
    ((ERRORS++))
fi

# Verificaci√≥n 5: Listar sesiones activas
echo -e "${YELLOW}5Ô∏è‚É£  Verificando sesiones activas...${NC}"
sessions_response=$(curl -s -H "Authorization: Bearer $API_KEY" "$SERVER_URL/api/sessions" --max-time 10)
if [ $? -eq 0 ]; then
    session_count=$(echo "$sessions_response" | jq '. | length' 2>/dev/null || echo "0")
    echo -e "${GREEN}‚úÖ API de sesiones responde (${session_count} sesiones activas)${NC}"
    
    if [ "$session_count" -gt 0 ]; then
        echo -e "${BLUE}   Sesiones activas:${NC}"
        echo "$sessions_response" | jq -r '.[] | "   - \(.sessionId): \(.status)"' 2>/dev/null || echo "   - Error parseando sesiones"
    fi
else
    echo -e "${RED}‚ùå Error consultando sesiones${NC}"
    ((ERRORS++))
fi

# Verificaci√≥n 6: Webhooks configurados
echo -e "${YELLOW}6Ô∏è‚É£  Verificando webhooks configurados...${NC}"
webhooks_response=$(curl -s -H "Authorization: Bearer $API_KEY" "$SERVER_URL/api/webhooks" --max-time 10)
if [ $? -eq 0 ]; then
    webhook_count=$(echo "$webhooks_response" | jq '. | length' 2>/dev/null || echo "0")
    echo -e "${GREEN}‚úÖ API de webhooks responde (${webhook_count} webhooks configurados)${NC}"
    
    if [ "$webhook_count" -gt 0 ]; then
        echo -e "${BLUE}   Webhooks configurados:${NC}"
        echo "$webhooks_response" | jq -r '.[] | "   - \(.sessionId): \(.webhookUrl)"' 2>/dev/null || echo "   - Error parseando webhooks"
    fi
else
    echo -e "${RED}‚ùå Error consultando webhooks${NC}"
    ((ERRORS++))
fi

# Verificaci√≥n 7: Directorios cr√≠ticos
echo -e "${YELLOW}7Ô∏è‚É£  Verificando directorios cr√≠ticos...${NC}"
CRITICAL_DIRS=("sessions" ".wwebjs_auth" ".wwebjs_cache" "public/uploads" "data")
for dir in "${CRITICAL_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        echo -e "${GREEN}‚úÖ Directorio existe: $dir${NC}"
    else
        echo -e "${RED}‚ùå Directorio faltante: $dir${NC}"
        mkdir -p "$dir"
        echo -e "${YELLOW}   ‚Ü≥ Directorio creado${NC}"
    fi
done

# Verificaci√≥n 8: Archivos de configuraci√≥n
echo -e "${YELLOW}8Ô∏è‚É£  Verificando archivos de configuraci√≥n...${NC}"
if [ -f ".env" ]; then
    echo -e "${GREEN}‚úÖ Archivo .env existe${NC}"
else
    echo -e "${RED}‚ùå Archivo .env faltante${NC}"
    ((ERRORS++))
fi

if [ -f "package.json" ]; then
    echo -e "${GREEN}‚úÖ Archivo package.json existe${NC}"
else
    echo -e "${RED}‚ùå Archivo package.json faltante${NC}"
    ((ERRORS++))
fi

# Verificaci√≥n 9: Dependencias
echo -e "${YELLOW}9Ô∏è‚É£  Verificando dependencias...${NC}"
if [ -d "node_modules" ]; then
    echo -e "${GREEN}‚úÖ Dependencias instaladas${NC}"
else
    echo -e "${RED}‚ùå Dependencias no instaladas${NC}"
    ((ERRORS++))
fi

# Verificaci√≥n 10: Logs recientes
echo -e "${YELLOW}üîü Verificando logs recientes...${NC}"
if command -v pm2 &> /dev/null; then
    recent_errors=$(pm2 logs whatsapp-api --lines 50 --nostream 2>/dev/null | grep -i error | wc -l)
    if [ "$recent_errors" -lt 5 ]; then
        echo -e "${GREEN}‚úÖ Logs: Pocos errores recientes ($recent_errors)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Logs: Varios errores recientes ($recent_errors)${NC}"
        echo -e "${BLUE}   üí° Revisa logs con: pm2 logs whatsapp-api${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  No se pueden verificar logs (PM2 no disponible)${NC}"
fi

# Resumen final
echo ""
echo -e "${BLUE}üìä Resumen de verificaci√≥n:${NC}"
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Todas las verificaciones pasaron correctamente${NC}"
    echo -e "${GREEN}üéâ La actualizaci√≥n fue exitosa${NC}"
    echo ""
    echo -e "${BLUE}üåê Accesos:${NC}"
    echo -e "${BLUE}   ‚Ä¢ Web: $SERVER_URL${NC}"
    echo -e "${BLUE}   ‚Ä¢ Admin: $SERVER_URL/admin${NC}"
    echo -e "${BLUE}   ‚Ä¢ API Key: $API_KEY${NC}"
    echo ""
    echo -e "${BLUE}üìã Comandos √∫tiles:${NC}"
    echo -e "${BLUE}   ‚Ä¢ Ver estado: pm2 status${NC}"
    echo -e "${BLUE}   ‚Ä¢ Ver logs: pm2 logs whatsapp-api${NC}"
    echo -e "${BLUE}   ‚Ä¢ Reiniciar: pm2 restart whatsapp-api${NC}"
    exit 0
else
    echo -e "${RED}‚ùå $ERRORS verificaciones fallaron${NC}"
    echo -e "${YELLOW}üí° Revisa los errores y considera hacer rollback si es necesario${NC}"
    echo -e "${YELLOW}üîÑ Para rollback: bash scripts/rollback.sh${NC}"
    exit 1
fi